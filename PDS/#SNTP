/* REXX                                                             */
/* ---------------------------------------------------------------- */
/*                                                                  */
/*  SNTP                                                            */
/*                                                                  */
/*  Kenneth W. clapp                                                */
/*   6 October   1999                                               */
/*                                                                  */
/*  write to port                                                   */
/*  accept response                                                 */
/*                                                                  */
/* ---------------------------------------------------------------- */

trace off

parse arg hostname

port = 123

signal on halt
signal on syntax

initialized = 0

/* Initialize                                                         */
stuff = socket('Initialize','SNRX')
parse var stuff src rest

if src=0 then initialized = 1
else call error 'E', 200, 'Unable to initialize SOCKET'

say hostname
/*
stuff = socket('GetHostByName', hostname)
parse var stuff src ipaddress rest
*/

say ipaddress

/* Initialize for receiving lines sent by the server                  */
/* stuff = Socket('Socket') */

stuff = Socket('Socket', 2, 'DATAGRAM', 'UDP' )
parse var stuff src s rest
if src¬=0 then call error 'E', 32, 'SOCKET(SOCKET) rc='src


num_test = translate(hostname,'           ','0123456789.')

if num_test = ' '
then do
     ipaddress = hostname
     end
/*
else do
     hostname = translate(Socket('GetHostName'))
     if src¬=0 then call error 'E', 32, 'SOCKET(GETHOSTNAME) rc='src
     end
*/

header = '13000C00'X
header = '12000C00'X
filx  = left('', 4, '00'x)
stamp = left('', 8, '00'x)
stampx = 'BBA60B0D390CB877'x

buffer = header||filx||filx||filx||stamp||stamp||stamp||stampx

say length(buffer)

say buffer

stuff = Socket('SendTo', s, buffer, ,'AF_INET' PORT IPADDRESS)
parse var stuff src rest

stuff = Socket('RecvFrom', s)
parse var stuff src t_NET t_port t_ip t_len buffer

say buffer

return

/* rc = sleep(1) */

do forever

/* Receive a line and display it                                    */
/* parse value Socket('Read', s) with len newline */
   stuff = Socket('Recv', s, 64000)

   parse var stuff src len newline
   say 'Read    stuff='stuff
   newline = ebcdic(newline)

   if (src ¬= 0) | (len <= 0)
   then do
        say 'src='src
        say 'len='len
        leave
        end

   say 'len    =>'len'<='
   say 'newline=>'newline'<='
/*
   dataline = dataline||newline
*/

   leave

   end

/* Terminate and exit ----------------------------------------------- */

stuff = socket('Terminate','RSWEB')
parse var stuff src rest

exit 0

/* Syntax error routine --------------------------------------------- */

syntax:
  call error 'E', rc, '==> REXX Error No.' 20000+rc
return


/* Halt processing routine ------------------------------------------ */

halt:
  call error 'E', 4, '==> REXX Interrupted'
return

/* Error message and exit routine ----------------------------------- */

error:
  type = arg(1)
  retc = arg(2)
  text = arg(3)
  ecretc = right(retc,3,'0')
  ectype = translate(type)
  ecfull = 'RXSCLI' || ecretc || ectype
  say '===> Error:' ecfull text
  if type¬='E' then return
  if initialized
     then do
       parse value Socket('SocketSetStatus') with . status severreason
       if status¬='Connected'
          then say 'The status of the socket set is' status severreason
     end
  call Socket 'Terminate'
exit retc

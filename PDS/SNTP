SNTP     CSECT
SNTP     AMODE ANY
SNTP     RMODE 24
*
*        PRINT NOGEN
*
***********************************************************************
*                                                                     *
*   This code is freely distributed but must retain following banner  *
*                                                                     *
***********************************************************************
*                                                                     *
*   MODULE NAME:  SNTP - Simple Network Time Protocol                 *
*                        Server                                       *
*   Copyright                                                         *
*   Kenneth W. Clapp                                                  *
*   7 October 1999                                                    *
*                                                                     *
*   Phoenix Home Life Mutual Insurance Company                        *
*   100 Bright Meadow Boulevard                                       *
*   Enfield, CT 06083                                                 *
*   USA                                                               *
*                                                                     *
*   Ken_Clapp@phl.com                                                 *
*                                                                     *
*   KenClapp@aol.com                                                  *
*                                                                     *
***********************************************************************
*                                                                     *
*   This code has been running since October 1999:                    *
*   - Currently  on OS/390 V2.8                                       *
*   - Previously on OS/390 V2.5                                       *
*                                                                     *
*   It will not work on any OS/390 prior to the availability of       *
*   the TCP/IP assembler socket interface (OS/390 v2.5).              *
*                                                                     *
*   Neither Ken Clapp or the Phoenix Home Life can be held            *
*   responsible for any loss or damages caused by the use or          *
*   misuse of this code.                                              *
*                                                                     *
*   Although there is neither any formal support or guarantee         *
*   provided with this code,  I will try to respond to email          *
*   questions as time permits.                                        *
*                                                                     *
*   If you would like to be notified of updates, send me your name    *
*   and email address.                                                *
*                                                                     *
*   If you have made improvements or have suggestions, let me know.   *
*   I will see if I can incorporate them.                             *
*                                                                     *
***********************************************************************
*                                                                     *
*   If you find this program to be of value,                          *
*   send your business card and one of whatever your                  *
*   lowest denomination paper currency is to the following address.   *
*                                                                     *
*   International users, coin assortments appreciated,                *
*   but not required.                                                 *
*                                                                     *
*                                                                     *
*   Save the Mainframe                                                *
*   ------------------                                                *
*   C/O Kenneth W. Clapp - 2E311                                      *
*   Phoenix Home Life Mutual Insurance Company                        *
*   100 Bright Meadow Boulevard                                       *
*   Enfield, CT 06083                                                 *
*   USA                                                               *
*                                                                     *
*                                                                     *
*   This is for whimsy only, as I am curious to see who is            *
*   running my code and where it has traveled to.                     *
*                                                                     *
*   No payment is required.  No contract is implied.                  *
*       - This code is FREE, FREE, FREE! -                            *
*                                                                     *
***********************************************************************
*                                                                     *
*   LANGUAGE:  Assembler                                              *
*                                                                     *
*   ATTRIBUTES: NON-REUSABLE, AUTHORIZED                              *
*                                                                     *
*   REGISTER USAGE:                                                   *
*        R1  =                                                        *
*        R2  =                                                        *
*        R3  =                                                        *
*        R4  = work     - even seconds                                *
*        R5  = work     - fractional seconds                          *
*        R6  = work                                                   *
*        R7  = work                                                   *
*        R8  =                                                        *
*        R9  =                                                        *
*        R10 = RETURN REG                                             *
*        R11 =                                                        *
*        R12 =               BASE REG 2                               *
*        R13 = SAVE AREA   & BASE REG 1                               *
*        R14 =                                                        *
*        R15 =                                                        *
*                                                                     *
*   INPUT:  NONE                                                      *
*   OUTPUT: SYSPRINT activity log                                     *
*                                                                     *
*   Copybooks: IPCOPY          IP TRANSLATION TABLE                   *
*                                                                     *
*              X2CTBL          HEX TO CHARACTER TRANSLATION TABLE     *
*                                                                     *
***********************************************************************
*
*  Caveats:
*
*    1) Your sysplex timer must be set to UCT (GMT) time,
*       local time is determined from the timezone offset.
*
*    2) Be sure the dispatching priority of both TCP/IP and the SNTP
*       server are high enough to provide a consistent response.
*
***********************************************************************
*
*  Operation:
*
*    1) Start it up, watch it go. Well actually, it just sits there
*       waiting for a client request.
*
*    2) I'd suggest making it one of TCPIP "autostart"ed tasks.
*
*    3) It stops automatically when TCPIP is shutdown.
*
*    4) Simply cancel it if you want to bring it down sooner.
*
***********************************************************************
*
* Fixes:
*
* 2000-09-19 KWC - error in returned packet
*         1) code had only moved stamp4 to stamp2 if stamp2 was zero
*            --> this should always happen ! <--
*         2) changed mode on returned packet from 4 to 2
*         3) added printout of received packet
*
* 2000-09-20 KWC -
*         1) changed mode on returned packet from 2 back to 4
*            - some client misinterpret
*         2) added code for older clients. test transmit time
*            if it is zero, do -NOT- move it to originate time.
*
***********************************************************************
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
* ------ START OF EXECUTABLE CODE -----------------------------------
*
         USING BEGIN,R15               TEMP ADDRESSABILITY
*
BEGIN    B     SAVE                    JUMP OVER CONSTANTS
         DC    F'0'                    ADDR OF PREV SAVE AREA
         DC    F'0'                    ADDR OF NEXT SAVE AREA
         DC    15F'0'                  REGS 14 - 12
         DC    18F'0'                  SECOND LEVEL SAVE AREA
*
* -------------------------------------------------------------------
*
VERSION  DC    CL40'SNTP V1.9 : ASSEMBLED &SYSDATE &SYSTIME'
         DC    CL40'Copyright: Kenneth W. Clapp 1999'
         DC    CL40'Phoenix Home Life Insurance'
         DC    CL40'100 Bright Meadow Boulevard'
         DC    CL40'Enfield CT, 06083  USA     '
         DC    CL40'Ken_Clapp@phl.com - KenClapp@aol.com'
*
* -------------------------------------------------------------------
*
SAVE     DS    0H
         SAVE (14,12)
         ST   15,8(,13)                ADDRESS OF THIS SAVE AREA
         ST   13,4(,15)                ADDRESS OF THIS LAST AREA
         LR   13,15                    ESTABLISH ADDRESSABILITY
         LR   12,13
         LA   12,2048(,R12)            SETUP SECOND BASE REGISTER
         LA   12,2048(,R12)            SETUP SECOND BASE REGISTER
*
         DROP 15
         USING BEGIN,R13,R12           READY TO ROCK AND ROLL
*
* ------ OPEN LOG FILE ----------------------------------------------
*
         OPEN  (SYSPRINT,(OUTPUT)),MODE=31
*
* ------ MOVE TEXT INTO MESSAGE AREA --------------------------------
*
         MVC   PRINTLIN+00(8),=CL8'STARTING'
         MVC   PRINTLIN+10(40),VERSION
         BAL   R10,LOG
*
* ------ MAKE OURSELF NON-SWAPPABLE ---------------------------------
*
         MODESET MODE=SUP,KEY=ZERO   GET INTO SUPERVISOR STATE
         XR    R1,R1                 NO ECB POSTING
         SYSEVENT TRANSWAP           MAKE OURSELF NON-SWAPPABLE
         MODESET MODE=PROB,KEY=NZERO BACK TO PROBLEM STATE
*
* ------ MOVE TEXT INTO MESSAGE AREA --------------------------------
*
         MVC   PRINTLIN+00(8),=CL8'DELAY   '
         MVC   PRINTLIN+10(32),=CL32'TO ENSURE TCP/IP IS RUNNING.'
         BAL   R10,LOG
*
* ------ WAIT to ENSURE TCPIP STARTUP -------------------------------
*
         STIMER WAIT,BINTVL=WAITTIME   WAIT A MOMENT
*
* ------ Issue INITAPI to connect to interface ----------------------
*
         MVC   TYPE,MINITAPI           MOVE 'INITAPI' TO MESSAGE
*
         EZASMI TYPE=INITAPI,     Issue INITAPI Macro                  X
               SUBTASK=SUBTASK,   SPECIFY SUBTASK IDENTIFIER           X
               MAXSOC=MAXSOC,     SPECIFY MAXIMUM NUMBER OF SOCKETS    X
               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               APITYPE=APITYPE,   (SPECIFY APITYPE FIELD)              X
               ERROR=ERROR       ABEND IF ERROR ON MACRO
*
         BAL   R10,RCCHECK            --> DID IT WORK?
*
* ------ ISSUE GETHOSTID CALL ---------------------------------------
*
         MVC   TYPE,=CL8'GETHOSTI'     'GETHOSTI' TO MESSAGE
*
         EZASMI TYPE=GETHOSTID,                                        X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA    IN CASE WE ARE DOING EXITS OR ECBS
*
         BAL   R10,RCCHECK        CHECK FOR SUCCESSFUL CALL
*
         ST    R8,ADDR            SAVE OUR ID
*
* -----  Issue SOCKET Macro to obtain a socket descriptor -----------
*
         MVC   TYPE,MSOCKET       MOVE 'SOCKET' TO MESSAGE
*
         EZASMI TYPE=SOCKET,      Issue SOCKET Macro                   X
               AF='INET',         INET or IUCV                         X
               SOCTYPE='DATAGRAM',  STREAM(TCP) DATAGRAM(UDP) OR RAW   X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   IN CASE WE ARE DOING EXITS OR ECBS   X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R10,RCCHECK        CHECK FOR SUCCESSFUL CALL
*
         STH   R8,S               SAVE RETCODE ( =SOCKET DESCRIPTOR )
*
* ------ Issue BIND socket ------------------------------------------
*
         MVC   TYPE,MBIND         MOVE 'BIND' TO MESSAGE
*
         MVC   PORT(2),PORTS      Load STREAM port #
         MVC   ADDRESS(4),=F'0'   ACCEPT ANY CLIENT IP ADDRESS
*
         EZASMI TYPE=BIND,        Issue Macro                          X
               S=S,               STREAM                               X
               NAME=NAME,         (SOCKET NAME STRUCTURE)              X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   IN CASE WE ARE DOING EXITS OR ECBS   X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R10,RCCHECK        CHECK FOR SUCCESSFUL CALL
*
* -------------------------------------------------------------------
*
*        Issue READ - Read data and store in buffer
*
* -------------------------------------------------------------------
*
LOOP     EQU   *
*
         MVC   ADDRESS(4),=F'0'   ACCEPT ANY CLIENT IP ADDRESS
         MVC   ADDRESSR(4),=F'0'  CLEAR LAST IP ADDRESS
         MVC   NBYTE,=AL4(NBYTE-PACKET)    SIZE OF BUFFER
*
         EZASMI TYPE=RECVFROM,    Issue Macro                          X
               S=S,               SOCKET                               X
               NBYTE=NBYTE,       SIZE OF BUFFER                       X
               BUF=PACKET,        (BUFFER)                             X
               NAME=NAMER,        RECV NAME STRUCTURE                  X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   IN CASE WE ARE DOING EXITS OR ECBS   X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R10,GETTIME        RECEIVE TIME
*
         CLC   RETCODE,=F'-1'     ANY PROBLEMS ?
         BE    TERM               YES...JUST TERMINATE
*
         MVC   PACKET1,PACKET     hold received packet    2000-09-19
*
         STM   R4,R5,STAMP3       STORE READ TIME STAMP
*
* -------------------------------------------------------------------
*
*        Process Packet
*
* -------------------------------------------------------------------
*
         CLC   ADDRESSR,=F'0'     IS FROM ADDRESS 0.0.0.0 ?
         BE    ERROR              YES... ERROR !
*
         MVC   HEADWORK,HEADER    GET FIRST BYTE OF PACKET
         NI    HEADWORK,X'07'     ONLY CHECK MODE BITS
         CLI   HEADWORK,X'03'     IS THIS A CLIENT REQUEST ?
         BNE   IGNORE             NO...IGNORE IT
*
*                       LL        LEAP FLAG -------------------------
*                       LL          00  = NO LEAP SECOND
*                       LL          01  = LAST MINUTE 61 SECS
*                       LL          10  = LAST MINUTE 59 SECS
*                       LL          11  = CLOCK NOT SYNCED!
*                         VVV     VERSION ---------------------------
*                         VVV       011 = 3
*                         VVV       100 = 4
*                            MOD  MODE ------------------------------
*                            MOD    011 = CLIENT
*                            MOD    100 = SERVER
*
         NI    HEADER,X'38'       TURN OFF MODE BITS AND LEAP FLAG
         OI    HEADER,X'04'       SET MODE to 4 (SERVER) 2000-09-20
*
***      CLI   HEADER,X'24'       VERSION 4
***      BE    V4
***      CLI   HEADER,X'1C'       VERSION 3
***      BE    V3
***      CLI   HEADER,X'14'       VERSION 2
***      BE    V2
***      CLI   HEADER,X'0C'       VERSION 1
***      BE    V1
*
V1       EQU   *
***      B     VX
*
V2       EQU   *
***      B     VX
*
V3       EQU   *
         MVC   STRATUM,=AL1(1)        PRIMARY SERVER
         MVC   REFID,=XL4'41435453'   REFERENCE ID - "ACTS" (ASCII)
         MVC   ROOTDLY,=XL4'00000000'
         MVC   ROOTDISP,=XL4'00000000'
VX       EQU   *
         MVC   PRECISN,=AL1(-24)  PRECISION (FRACTIONAL HEX BITS)
*
         MVC   NBYTE,=AL4(48)     BUFFER LENGTH
*
***                               REMOVED 2000-09-19
***      CLC   STAMP2,=XL8'0000000000000000' IS ORIGINATE TIME SET?
***      BNE   STAMP2OK           YES...
*
***                               ADDED   2000-09-20
         CLC   STAMP4,=XL8'0000000000000000' IS TRANSMIT TIME SET?
         BE    STAMP2OK           NO...
*
         MVC   STAMP2,STAMP4      MOVE INCOMING TRANSMIT TIME TO ORIG
STAMP2OK EQU   *
*
         BAL   R10,GETTIME        TRANSMIT TIME
*
         STM   R4,R5,STAMP4       STORE TRANSMIT TIME
*
         XR    R5,R5              ON AN EVEN SECOND
         STM   R4,R5,STAMP1       LAST SYNC WITH MASTER CLOCK
*
* -------------------------------------------------------------------
*
*        Issue WRITE - Write data from buffer
*
* -------------------------------------------------------------------
*
         EZASMI TYPE=SENDTO,      Issue Macro                          X
               S=S,               SOCKET                               X
               NBYTE=NBYTE,       SIZE OF BUFFER                       X
               BUF=PACKET,        (BUFFER)                             X
               NAME=NAMER,        RECV NAME STRUCTURE                  X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   IN CASE WE ARE DOING EXITS OR ECBS   X
               ERROR=ERROR        Abend if Macro error
*
         CLC   RETCODE,=F'-1'     ANY PROBLEMS ?
         BE    ERROR              YES...
*
         BAL   R10,IPTRANS        TRANSLATE IP ADDRESS
*
         MVC   PACKET2,PACKET     hold sent    packet  2000-09-19
         MVC   PACKET,PACKET1     get received packet  2000-09-19
*
         MVC   PRINTLIN+00(08),=CL8'RECEIVED'
         MVC   PRINTLIN+09(15),IPADDR
         BAL   R10,DUMPREC        CHARACTER FORMAT HEX RECORD
         BAL   R10,LOG            PRINT TO LOG
*
         MVC   PACKET,PACKET2     get sent packet       2000-09-19
         MVC   PRINTLIN+00(08),=CL8'SENDTO  '
*
IGNOREP  EQU   *
         MVC   PRINTLIN+09(15),IPADDR
         BAL   R10,DUMPREC        CHARACTER FORMAT HEX RECORD
*
         BAL   R10,LOG            PRINT TO LOG
*
         B     LOOP
*
*--------------------------------------------------------------------
*
*        Ignore, but write to log any invalid requests
*
*--------------------------------------------------------------------
*
IGNORE   EQU   *
         MVC   NBYTE,=AL4(48)     BUFFER LENGTH
*
         MVC   PRINTLIN+00(08),=CL8'IGNORED '
*
         BAL   R10,IPTRANS        TRANSLATE IP ADDRESS
*
         B     IGNOREP
*
*--------------------------------------------------------------------
*        Return to Caller
*--------------------------------------------------------------------
*
TERM     EQU   *
         MVC   TYPE,MRECV         MOVE 'RECVFROM' TO MESSAGE
         BAL   R10,RCCHECK        CHECK FOR SUCCESSFUL CALL
*
         CLOSE SYSPRINT                CLOSE PRINTER
*
         L     R13,4(R13)
         RETURN (14,12),T,RC=0
*
*--------------------------------------------------------------------
*        translate incoming hex ip address
*        to character dotted decimal
*        result in IPADDR CL15
*--------------------------------------------------------------------
*
IPTRANS  DS    0F
         XR    R6,R6
         IC    R6,ADDRESSR             FROM IP ADDRESS
         SLL   R6,2                    * 4
         L     R7,=A(IPTBL)
         AR    R7,R6
         MVC   IPADDR+0(4),0(R7)
*
         XR    R6,R6
         IC    R6,ADDRESSR+1           FROM IP ADDRESS
         SLL   R6,2                    * 4
         L     R7,=A(IPTBL)
         AR    R7,R6
         MVC   IPADDR+4(4),0(R7)
*
         XR    R6,R6
         IC    R6,ADDRESSR+2           FROM IP ADDRESS
         SLL   R6,2                    * 4
         L     R7,=A(IPTBL)
         AR    R7,R6
         MVC   IPADDR+8(4),0(R7)
*
         XR    R6,R6
         IC    R6,ADDRESSR+3           FROM IP ADDRESS
         SLL   R6,2                    * 4
         L     R7,=A(IPTBL)
         AR    R7,R6
         MVC   IPADDR+12(3),0(R7)
*
         BR    R10
*
*--------------------------------------------------------------------
*
*        TRANSLATE PACKET TO CHARACTER FORMAT
*
*--------------------------------------------------------------------
*
DUMPREC  DS    0H
*
         LA    R3,PACKET              SNTP PACKET
         L     R4,NBYTE               NUMBER OF BYTES
         LA    R5,PRINTLIN+25         OUTPUT AREA
***            R6                     COMPUTED INDEX
         L     R7,=A(X2CTBL)          HEX TO CHAR TABLE
*
DUMPLOOP EQU   *
         XR    R6,R6                   CLEAR REG 6
         IC    R6,0(,R3)               GET HEX BYTE
         SLL   R6,1                    * 2 (TABLE WIDTH)
         AR    R6,R7                   INDEX INTO TABLE
         MVC   0(2,R5),0(R6)           MOVE CHARACTERS TO PRINT LINE
         LA    R3,1(,R3)
         LA    R5,2(,R5)
         BCT   R4,DUMPLOOP
*
         BR    R10
*
* -------------------------------------------------------------------
*
*        COMPUTE NTP TIME STAMP
*
*          r4  = seconds since 00:00:00 Jan 1, 1900
*          r5  = fractional second
*
* -------------------------------------------------------------------
*
GETTIME  EQU   *
*
         STCK  IBMCLOCK
         LM    R8,R9,IBMCLOCK      1,000,000 TICS PER SECOND
         SRDL  R8,12               GET RID OF UNUSED BITS
*
         L     R6,=F'2000000'      2 * 1,000,000  (DIV BY 2)
*
         DR    R8,R6
         LR    R4,R9               SAVE QUOTIENT
*
         XR    R9,R9
         SRDL  R8,1                KEEP IT MANAGABLE (DIV BY 2)
*
         DR    R8,R6
         LR    R5,R9               SAVE QUOTIENT
*
         SLL   R5,1                SHIFT IT BACK (MULT BY 2)
         SLDL  R4,1                SHIFT 'EM ALL BACK (MULT BY 2)
*
         BR    R10
*
IBMCLOCK DC    2F'0'             R8 , R9  INPUT
*
* -------------------------------------------------------------------
*        NTP/SNTP PACKET FORMAT
* -------------------------------------------------------------------
*
         DS    0D
         DC    CL8'PACKET'
PACKET   DS    0CL84
HEADER   DC    B'00011100' 00  - LEAP INDICATOR, NO WARNING
*                          000 - VERSION,  3 IP4
*                          000 - MODE,  3 CLIENT 4 SERVER
STRATUM  DC    AL1(1)      STATUM - PRIMARY REFERENCE
POLL     DC    AL1(00)     POLL INTERVAL ?
PRECISN  DC    AL1(-20)    PRECISION (20 HEX BITS)
ROOTDLY  DC    F'0'        ROOT DELAY
ROOTDISP DC    F'0'        ROOT DISPERSION
REFID    DC    XL4'41435453'   REFERENCE ID   "ACTS" (ASCII)
STAMP1   DC    CL8' '      REFERENCE TIMESTAMP (TIME OF LAST CORRECTED)
STAMP2   DC    CL8' '      ORIGINATE TIMESTAMP (SENT BY CLIENT)
STAMP3   DC    CL8' '      RECEIVE   TIMESTAMP (BY SERVER)
STAMP4   DC    CL8' '      TRANSMIT  TIMESTAMP (BY SERVER)
         DC    F'0'        KEY ID              (OPTIONAL)
         DC  32F'0'        MESSAGE DIGEST      (OPTIONAL)
*
PACKETX  DC    CL84' '
PACKET1  DC    CL84' '
PACKET2  DC    CL84' '
*
NBYTE    DC    AL4(NBYTE-PACKET)    SIZE OF BUFFER
*
HEADWORK DC    CL1' '
*
* -------------------------------------------------------------------
*        LOG MESSAGE TO SYSPRINT
* -------------------------------------------------------------------
*
LOG      DS    0F
*
         PUT   SYSPRINT,PRINTREC
*
         MVC   PRINTREC(133),SPACES    CLEAR PRINT RECORD
*
         BR    R10
*
* -------------------------------------------------------------------
*
*        log print record
*
* -------------------------------------------------------------------
*
PRINTREC DS    0F
PRINTASA DC    C' '
PRINTLIN DC    CL132' '
*
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                      C
               RECFM=FBA,LRECL=133    ,BLKSIZE=0
*
* ------ STARTUP DELAY TIME -----------------------------------------
*
WAITTIME DC    F'00001000'          100 = 1 SECOND WAIT TIME
*
*--------------------------------------------------------------------
*
WTOSUB   DS    0F
         MVC   MSGCMD(8),TYPE
         WTO   TEXT=MSG           WRITE MESSAGE TO OPERATOR
         BR    R10                --> RETURN TO CALLER
*
*--------------------------------------------------------------------
*
         CNOP  2,4
*        USES R6,R7,R8         RETCODE RETURNED IN R8
RCCHECK  EQU   *
         MVC   MSGRSLT1,MSGSUCC   ...SUCCESS TEXT
         L     R6,RETCODE
         LTR   R6,R6
         BM    NOWAIT
         CLI   SYNFLAG,0          PLAIN CASE?
         BE    NOWAIT             --> SKIP IT
         MVC   KEY+14(8),SUBTASK
         MVC   KEY+23(8),TYPE
KEY      WTO   'WAIT: XXXXXXXX XXXXXXXX'
         WAIT  ECB=ECB
NOWAIT   EQU   *
*        LA    R15,ECB
*        ST    R15,ECB
         ST    R9,ECB             MAKE THIS THE TOKEN AGAIN
         L     R6,RETCODE         CHECK FOR SUCCESSFUL CALL
         LTR   R8,R6              SAVE A COPY
*
         BNL   CONT00
*
         MVC   MSGRSLT1,MSGFAIL   ...FAIL TEXT
CONT00   EQU   *
*
*--------------------------------------------------------------------
*        FORMAT THE RETCODE= -XXXXXXX ERRNO= XXXXXXX MSG RESULTS
*        ***> R6 = RETCODE VALUE ON ENTRY
*--------------------------------------------------------------------
*
         MVC   MSGRTCT,MSGRETC    ' RETCODE= '
         MVI   MSGRTCS,C'+'
         LTR   R6,R6
         BNM   NOTM               -->
         MVI   MSGRTCS,C'-'       MOVE SIGN WHICH IS ALWAYS MINUS
NOTM     EQU   *
         MVC   MSGERRT,MSGERRN    ' ERRNO= '
*
         CVD   R6,DWORK           CONVERT IT TO DECIMAL
         UNPK  MSGRTCV,DWORK+4(4) UNPACK IT
         OI    MSGRTCV+6,X'F0'    CORRECT THE SIGN
*
         L     R6,ERRNO           GET ERRNO VALUE
         CVD   R6,DWORK           CONVERT IT TO DECIMAL
         UNPK  MSGERRV,DWORK+4(4) UNPACK IT
         OI    MSGERRV+6,X'F0'    CORRECT THE SIGN
*
         MVC   MSGRSLT2(35),MSGRTCD
*
         SR    R6,R6              CLEAR OUT...
         ST    R6,RETCODE            RETCODE AND...
         ST    R6,ERRNO                 ERRNO
*
*
         CLI   TRACE,0
         BNE   NOTRACE
         B     WTOSUB             --> DO WTO
*
NOTRACE  EQU   *
         BR    R10                --> RETURN TO CALLER
*
SYNFLAG  DC    H'0'               DEFAULT TO SYN
TRACE    DC    H'0'               DEFAULT TO TRACE
*
*--------------------------------------------------------------------
*        ABEND PROGRAM AND GET A DUMP
*--------------------------------------------------------------------
*
ERROR    ABEND 1,DUMP
*
*--------------------------------------------------------------------
* CONSTANTS USED TO RUN PROGRAM
*--------------------------------------------------------------------
*
EZASMGW  EZASMI TYPE=GLOBAL,      Storage definition for GWA           X
               STORAGE=CSECT
*
*---------------------*
* INITAPI macro parms *
*---------------------*
*
SUBTASK  DC    CL8'SNTP    '      SUBTASK PARM VALUE
MAXSOC   DC    H'10'              MAXSOC PARM VALUE
APITYPE  DC    H'2'               OR A 3
MAXSNO   DC    F'0'               (HIGHEST SOCKET DESCRIPTOR AVAILABLE)
IDENT    DC    0CL16' '
         DC    CL8'       '       NAME OF TCP TO WHICH CONNECTING
         DC    CL8'SNTP    '      MY ADDR SPACE NAME
*
*--------------------------------------------------------------------
* SOCKET macro parms *
*--------------------*
*
S        DC    H'0'               SOCKET DESCRIPTOR FOR STREAM
*
*--------------------------------------------------------------------
* BIND MACRO PARMS   *
*--------------------*
*
         CNOP  0,4
NAME     DC    0CL16' '           SOCKET NAME STRUCTURE
         DC    AL2(2)             FAMILY
PORT     DC    H'0'
ADDRESS  DC    F'0'               ACCEPT FROM THIS ADDRESS (0 = ANY)
         DC    XL8'00'            RESERVED
*
IPADDR   DC    CL15' '
*
*--------------------------------------------------------------------
* RECVFROM PARMS     *
*--------------------*
*
         CNOP  0,4
NAMER    DC    0CL16' '           SOCKET NAME STRUCTURE
         DC    AL2(2)             FAMILY
PORTR    DC    H'0'
ADDRESSR DC    F'0'               ACCEPT FROM THIS ADDRESS (0 = ANY)
         DC    XL8'00'            RESERVED
*
*--------------------------------------------------------------------
*
ADDR     DC    F'0'               MY IP ADDRESS
PORTS    DC    H'123'             NTP / SNTP
*
*--------------------------------------------------------------------
* LISTEN PARMS       *
*--------------------*
*
BACKLOG  DC    F'5'               BACKLOG
*
*--------------------------------------------------------------------
* READ MACRO PARMS   *
*--------------------*
*
SOCDESCA DC    H'0'               SOCKET DESCRIPTOR FROM ACCEPT
BUF      DC    CL256' THIS SHOULD NEVER APPEAR!!! :-('
*
*--------------------------------------------------------------------
* WTO FRAGMENTS *
*---------------*
*
MINITAPI DC    CL8'INITAPI'
MSOCKET  DC    CL8'SOCKET'
MBIND    DC    CL8'BIND'
MACCEPT  DC    CL8'ACCEPT'
MLISTEN  DC    CL8'LISTEN'
MRECV    DC    CL8'RECVFROM'
MWRITE   DC    CL8'WRITE'
MSENDTO  DC    CL8'SENDTO'
MCLOSE   DC    CL8'CLOSE'
MTERMAPI DC    CL8'TERMAPI'
MSGSTART DC    CL8' STARTED'
MSGEND   DC    CL8' ENDED  '
MSGBUFF  DC    CL10' BUFFER:  '                    ...
MSGSUCC  DC    CL10' SUCCESS  '     Command results...
MSGFAIL  DC    CL10' FAIL: ( '                    ...
MSGRETC  DC    CL10' RETCODE= '                    ...
MSGERRN  DC    CL10' ERRNO=   '                    ...
BLANK35  DC    CL80' '
SPACES   DC    CL133' '
*
*--------------------------------------------------------------------
* ERROR NUMBER / RETURN CODE FIELDS *
*-----------------------------------*
*--------------------------------------------------------------------
* MESSAGE AREA *
*--------------*
*
MSG      DC    0F'0'              MESSAGE AREA
         DC    AL2(MSGE-MSGNUM)   LENGTH OF MESSAGE
MSGNUM   DC    CL6'SNTP:'        'EZASOKASXX:'
MSGCMD   DC    CL8' '             COMMAND ISSUED
MSGRSLT1 DC    CL10' '            COMMAND RESULTS (SUCC, PASS, FAIL)
MSGRSLT2 DC    CL66' '            RETURNED VALUES
MSGE     EQU   *                  End of message
*
*--------------------------------------------------------------------
* MESSAGE RESULTS AREAS (fill in and move to MSGRSLT2) *
*------------------------------------------------------*
*
MSGRTCD  DC    0CL35' '           GENERAL RETURNED VALUE
MSGRTCT  DC    CL10'RETCODE='    ' RETCODE= '
MSGRTCS  DC    CL1' '             '-' (NEGATIVE SIGN)
MSGRTCV  DC    CL7' '             RETURNED VALUE (RETCODE)
MSGERRT  DC    CL10' ERRNO='      ' ERRNO=   '
MSGERRV  DC    CL7' '             RETURNED VALUE (ERRNO)
*
*--------------------------------------------------------------------
*
DWORK    DC    D'0'            WORK AREA
*
         LTORG ,
*
*--------------------------------------------------------------------
*
         CNOP  0,8
*
MYCB     EQU   *               MY CONTROL BLOCK
REQAREA  EQU   *
ECB      DC    A(ECB)          SELF POINTER
         DC    CL100'WORK AREA'
*
MYTIE    EZASMI TYPE=TASK,STORAGE=CSECT     TIE
*
TYPE     DC    CL8'TYPE'
ERRNO    DC    F'0'
RETCODE  DC    F'0'
*
*--------------------------------------------------------------------
*
         COPY  IPCOPY          IP TRANSLATION TABLE
*
         COPY  X2CTBL          HEX TO CHARACTER TRANSLATION TABLE
*
*--------------------------------------------------------------------
*
         END   BEGIN

/* rexx                                                             */
/* Kenneth W. Clapp                                                 */
/* 2000 JAN 17                                                      */
/* NTP                                                              */
/*  determine date and time                                         */
/*    base on NTP / SNTP timestamp                                  */
/*                                                                  */
/* 32 bit number                                                    */

parse arg Hex_1 HEX_2 trash

if length(hex_1) > 16
then do
     hex_2 = substr(hex_1,9)
     hex_1 = left(hex_1,8)
     end

hex_X = right('00000000'hex_1,8)
hex_2 = left(HEX_2'00000000'hex_1,8)


/* say '>'HEX_X'<' */

numeric digits 24

DEC_X = X2d(HEX_X)
DEC_2 = X2d(HEX_2)

/* say '>'dec_x'<' */

c_sec  = 1            /* counts per second */
c_min  = c_sec  * 60
c_hour = c_min  * 60
c_day  = c_hour * 24

S_year  = 1900
S_day   = 001
s_hour  = 00
s_min   = 00
s_sec   = 00
s_milli = 000000

dy.0 = 366
dy.1 = 365
dy.2 = 365
dy.3 = 365

s_days = c_dec(c_day)
s_hour = c_dec(c_hour)
s_min  = c_dec(c_min)
s_sec  = c_dec(c_sec)
s_milli = trunc((dec_2/4294967296)*1000000+.5)

lx = 0
do i = 1900 to 2100
   ld = dy.lx
   if i = 1900 then ld = 365
   if s_days < ld then leave
   s_days = s_days - ld
   s_year = s_year + 1
   lx = lx + 1
   if lx = 4 then lx = 0
   end

s_day  = s_days+1
h_days = s_day

m.1 = 31
m.2 = 28
m.3 = 31
m.4 = 30
m.5 = 31
m.6 = 30
m.7 = 31
m.8 = 31
m.9 = 30
m.10 = 31
m.11 = 30

if ld = 366 then m.2 = 29

do i = 1 to 12
   if h_days < m.i then leave
   h_days = h_days - m.i
   end

s_hour  = right('0'S_HOUR,2)
s_min   = right('0'S_min,2)
s_SEC   = right('0'S_SEC,2)
s_milli = right('000000's_milli,6)

s_year = right('0000'S_Year,4)
s_day  = right('000's_day,3)

s_dD   = right('00'h_days,2)
s_mm   = right('00'I,2)

L_T = 'TIME='S_HOUR':'S_MIN':'S_SEC'.'S_MILLI
L_J = 'DATE='S_YEAR'.'S_DAY
L_D = 'DATE='S_YEAR'/'S_MM'/'s_DD

say ' '
say L_t L_J
say L_D
say ' '
exit

/* **************************************  */

c_dec: procedure expose dec_x

parse arg cc

x = trunc(dec_x/cc)
dec_x = dec_x-(x*CC)

return x

